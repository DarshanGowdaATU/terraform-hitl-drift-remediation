name: Detect Terraform Drift

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      force_slack:
        type: boolean
        default: false
        description: "Post to Slack even without drift"

concurrency:
  group: drift-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  AWS_REGION: "us-east-1"
  TF_DIR: "terraform"
  SLACK_CHANNEL: "C097WJUFJCU"
  OIDC_ROLE_ARN: "arn:aws:iam::147997134125:role/GitHubTerraformPlanRole"

jobs:
  detect:
    name: Detect & Notify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC AssumeRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup tools
        run: |
          sudo apt-get update
          sudo apt-get install -y pipx jq
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Who am I (sanity)
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false  # preserve detailed exit codes

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false -no-color

      - name: Plan (refresh-only, detailed exit code)
        id: plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          set +e
          terraform plan -refresh-only -detailed-exitcode -lock-timeout=2m -out=tfplan.out -no-color -input=false
          code=$?
          echo "exitcode=$code" >> $GITHUB_OUTPUT
          if [ $code -eq 1 ]; then
            echo '{}' > plan.json
            echo 'Plan failed; created empty plan.json for diagnostics.'
            sha="$(sha256sum plan.json | awk '{print $1}')"
            echo "drift_id=${sha::12}-${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
            exit 0
          fi
          terraform show -no-color tfplan.out > plan.txt
          terraform show -json tfplan.out > plan.json
          sha="$(sha256sum plan.json | awk '{print $1}')"
          echo "drift_id=${sha::12}-${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
          exit 0

      - name: Debug plan exit code
        run: echo "Plan exit code was:${{ steps.plan.outputs.exitcode }}"

      - name: Upload plan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ steps.plan.outputs.drift_id }}
          path: |
            ${{ env.TF_DIR }}/tfplan.out
            ${{ env.TF_DIR }}/plan.txt
            ${{ env.TF_DIR }}/plan.json
          retention-days: 7

      - name: Install Checkov (CIS scan)
        run: pipx install checkov

      - name: Run Checkov
        id: checkov
        run: |
          checkov -d "$TF_DIR" -o json > checkov.json || true
          # Handle both Checkov 2.x (object) and 3.x (array) JSON
          fails=$(jq -r '
            if type=="array" then
              map((.results.failed_checks // []) | length) | add
            else
              (.results.failed_checks // []) | length
            end' checkov.json 2>/dev/null || echo 0)
          warns=$(jq -r '
            if type=="array" then
              ( (map((.results.parsing_errors // []) | length) | add)
                + (map((.results.resource_skipped_checks // []) | length) | add) )
            else
              (((.results.parsing_errors // []) | length)
                + ((.results.resource_skipped_checks // []) | length))
            end' checkov.json 2>/dev/null || echo 0)
          echo "failed=${fails}" >> $GITHUB_OUTPUT
          echo "warned=${warns}" >> $GITHUB_OUTPUT

      - name: Upload Checkov report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-${{ steps.plan.outputs.drift_id }}
          path: checkov.json
          retention-days: 7
          
      - name: Build Slack payload
        if: ${{ steps.plan.outputs.exitcode == '2' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_slack == 'true') }}
        id: payload
        env:
          DRIFT_ID: ${{ steps.plan.outputs.drift_id }}
          EXIT: ${{ steps.plan.outputs.exitcode }}
          FAILS: ${{ steps.checkov.outputs.failed }}
          WARNS: ${{ steps.checkov.outputs.warned }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          # Counts
          summary="$(jq -r '
            {adds:(.resource_changes//[]|map(.change.actions|join(","))|map(select(.=="create"))|length),
             changes:(.resource_changes//[]|map(.change.actions|join(","))|map(select(.=="update"))|length),
             destroys:(.resource_changes//[]|map(.change.actions|join(","))|map(select(.=="delete"))|length)}' $TF_DIR/plan.json)"
          adds=$(echo "$summary" | jq -r .adds)
          changes=$(echo "$summary" | jq -r .changes)
          destroys=$(echo "$summary" | jq -r .destroys)

          # Top 10 per action
          creates_list=$(jq -r '
            [(.resource_changes // [])[]
             | select((.change.actions // []) | index("create"))
             | .address] | .[0:10]
            | if length==0 then "none" else map("• `" + . + "`") | join("\n") end
          ' $TF_DIR/plan.json)
          updates_list=$(jq -r '
            [(.resource_changes // [])[]
             | select((.change.actions // []) | index("update"))
             | .address] | .[0:10]
            | if length==0 then "none" else map("• `" + . + "`") | join("\n") end
          ' $TF_DIR/plan.json)
          deletes_list=$(jq -r '
            [(.resource_changes // [])[]
             | select((.change.actions // []) | index("delete"))
             | .address] | .[0:10]
            | if length==0 then "none" else map("• `" + . + "`") | join("\n") end
          ' $TF_DIR/plan.json)

          # Diff excerpt
          diff_snippet="$(grep -E '^[[:space:]]*[~+-]' "$TF_DIR/plan.txt" | head -n 30)"

          # Build payload with jq (use interpolation, not +)
          jq -n \
            --arg channel "$SLACK_CHANNEL" \
            --arg drift "$DRIFT_ID" \
            --arg runurl "$RUN_URL" \
            --arg fails "$FAILS" \
            --arg warns "$WARNS" \
            --arg adds "$adds" \
            --arg changes "$changes" \
            --arg destroys "$destroys" \
            --arg creates "$creates_list" \
            --arg updates "$updates_list" \
            --arg deletes "$deletes_list" \
            --arg diff "$diff_snippet" \
            '
            {
              channel: $channel,
              text: "Terraform drift detected",
              blocks: [
                { "type": "header", "text": { "type": "plain_text", "text": "Terraform Drift Detected" } },
                { "type": "section", "fields": [
                    { "type": "mrkdwn", "text": "*Drift ID:*\n\($drift)" },
                    { "type": "mrkdwn", "text": "*Repo/Run:*\n<\($runurl)|Open run>" }
                  ]},
                { "type": "section", "fields": [
                    { "type": "mrkdwn", "text": "*Adds:* \($adds)" },
                    { "type": "mrkdwn", "text": "*Changes:* \($changes)" },
                    { "type": "mrkdwn", "text": "*Destroys:* \($destroys)" }
                  ]},
                { "type": "section", "text": { "type": "mrkdwn", "text": ("*Creates (up to 10):*\n\($creates)") } },
                { "type": "section", "text": { "type": "mrkdwn", "text": ("*Updates (up to 10):*\n\($updates)") } },
                { "type": "section", "text": { "type": "mrkdwn", "text": ("*Deletes (up to 10):*\n\($deletes)") } },
                { "type": "section", "text": { "type": "mrkdwn", "text": ("*Plan snippet:*\n```\($diff)```") } },
                { "type": "context", "elements": [
                    { "type": "mrkdwn", "text": "*CIS pre-check:* \($fails) failing checks, \($warns) warnings" }
                  ]},
                { "type": "actions", "elements": [
                    { "type": "button", "text": { "type": "plain_text", "text": "Approve Remediation" }, "style": "primary",
                      "action_id": "approve_remediation", "value": "approve" },
                    { "type": "button", "text": { "type": "plain_text", "text": "Reject" }, "style": "danger",
                      "action_id": "reject_remediation", "value": "reject" }
                  ]}
              ]
            }' > payload.json


      - name: Post to Slack
        if: steps.payload.outcome == 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          curl -sS -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
            -H "Content-type: application/json; charset=utf-8" \
            --data @payload.json | tee /tmp/slack_response.json
          jq -e '.ok == true' /tmp/slack_response.json > /dev/null

      - name: No drift (exit=0)
        if: ${{ steps.plan.outputs.exitcode == '0' && !(github.event_name == 'workflow_dispatch' && github.event.inputs.force_slack == 'true') }}
        run: echo "No drift."
