name: Detect Terraform Drift

on:
  schedule:
    - cron: "*/30 * * * *"
  push:
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      force_slack:
        type: boolean
        default: false
        description: "Post to Slack even without drift (manual runs only)"

jobs:
  detect-drift:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    env:
      AWS_REGION: us-east-1
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify backend (S3 + DynamoDB)
        run: |
          aws s3 ls s3://tf-state-l00187927 >/dev/null
          aws dynamodb describe-table --table-name terraform-locks --query 'Table.TableStatus' >/dev/null

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (uses remote S3 backend)
        run: terraform init -input=false

      - name: Terraform Plan for Drift Detection
        id: plan
        run: |
          set +e
          PLAN_OUTPUT=$(terraform plan -input=false -no-color -detailed-exitcode -out=tfplan.out 2>&1)
          PLAN_EXIT=$?
          echo "PLAN_EXIT=$PLAN_EXIT" >> $GITHUB_ENV
          echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$PLAN_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          set -e

      - name: Show plan result
        if: always()
        run: |
          echo "PLAN_EXIT=${PLAN_EXIT:-unset}"
          printf "%s\n" "${PLAN_OUTPUT:-no output captured}" | tail -n 200
          {
            echo "### Terraform plan"
            echo "- Exit code: ${PLAN_EXIT:-unset}"
            echo ""
            echo "Last 200 lines:"
            echo '```'
            printf "%s\n" "${PLAN_OUTPUT:-no output captured}" | tail -n 200
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Fail on plan error
        if: env.PLAN_EXIT == '1'
        run: |
          echo "Terraform plan failed (exit 1). See logs above." >&2
          exit 1

      - name: Send Slack Notification if Drift Detected
        if: env.PLAN_EXIT == '2' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force_slack == 'true')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
        run: |
          cat > payload.json <<'JSON'
          {
            "channel": "${SLACK_CHANNEL_ID}",
            "text": "⚠️ Terraform drift detected. Approve remediation?",
            "blocks": [
              {
                "type": "header",
                "text": { "type": "plain_text", "text": "⚠️ Drift detected", "emoji": true }
              },
              {
                "type": "section",
                "fields": [
                  { "type": "mrkdwn", "text": "*Repo:*\n${REPO}" },
                  { "type": "mrkdwn", "text": "*Branch:*\n${BRANCH}" },
                  { "type": "mrkdwn", "text": "*Commit:*\n\`${SHA}\`" },
                  { "type": "mrkdwn", "text": "*Run:*\n<${RUN_URL}|Open>" }
                ]
              },
              {
                "type": "section",
                "text": { "type": "mrkdwn", "text": "Approve remediation?" }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": { "type": "plain_text", "text": "Approve ✅" },
                    "style": "primary",
                    "action_id": "approve_remediation",
                    "value": "approve"
                  },
                  {
                    "type": "button",
                    "text": { "type": "plain_text", "text": "Reject ❌" },
                    "style": "danger",
                    "action_id": "reject_remediation",
                    "value": "reject"
                  }
                ]
              }
            ]
          }
          JSON

          curl -sS -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
            -H "Content-type: application/json; charset=utf-8" \
            --data @payload.json | tee /tmp/slack_response.json

          if command -v jq >/dev/null 2>&1; then
            jq -e '.ok == true' /tmp/slack_response.json > /dev/null
          else
            echo "jq not found; skipping ok-check"
          fi
