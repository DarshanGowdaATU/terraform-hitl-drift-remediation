name: Detect Terraform Drift

on:
  schedule:
    - cron: "*/30 * * * *"
  push:
    paths:
      - "terraform/**"
  workflow_dispatch:

jobs:
  detect-drift:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    env:
      AWS_REGION: us-east-1
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify backend (S3 + DynamoDB)
        run: |
          aws s3 ls s3://tf-state-l00187927 >/dev/null
          aws dynamodb describe-table --table-name terraform-locks --query 'Table.TableStatus' >/dev/null

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (uses remote S3 backend)
        run: terraform init -input=false

      - name: Terraform Plan for Drift Detection
        id: plan
        run: |
          set +e
          terraform plan -input=false -no-color -detailed-exitcode -out=tfplan.out 2>&1 | tee /tmp/plan.log
          PLAN_EXIT=${PIPESTATUS[0]}
          echo "PLAN_EXIT=$PLAN_EXIT" >> $GITHUB_ENV
          # Try to extract "Plan: X to add, Y to change, Z to destroy."
          PLAN_SUMMARY="$(terraform show -no-color tfplan.out 2>/dev/null | grep -E '^Plan:' | head -n1 || true)"
          echo "PLAN_SUMMARY=$PLAN_SUMMARY" >> $GITHUB_ENV
          set -e

      - name: Slack notify (all outcomes)
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          PLAN_SUMMARY: ${{ env.PLAN_SUMMARY }}
        run: |
          set -e

          case "${PLAN_EXIT}" in
            0) STATUS="✅ No drift";   HEADER="No drift";        PROMPT="No changes detected.";;
            1) STATUS="❌ Plan error"; HEADER="Plan error";      PROMPT="Terraform plan failed. See logs and run link below.";;
            2) STATUS="⚠️ Drift detected"; HEADER="Drift detected"; PROMPT="Approve remediation?";;
            *) STATUS="❓ Unknown";    HEADER="Unknown result";  PROMPT="PLAN_EXIT=${PLAN_EXIT}";;
          esac

          # Optional actions (only when drift=2)
          ACTIONS_BLOCK=""
          if [ "${PLAN_EXIT}" = "2" ]; then
            META=$(jq -n --arg run_id "${GITHUB_RUN_ID}" \
                        --arg repo "${REPO}" \
                        --arg sha "${SHA}" \
                        --arg branch "${BRANCH}" \
                        --arg run_url "${RUN_URL}" \
                        '{run_id:$run_id, repo:$repo, sha:$sha, branch:$branch, run_url:$run_url}' \
                    | base64 | tr -d '\n')
            ACTIONS_BLOCK=$(cat <<EOB
        ,
        {
          "type": "actions",
          "elements": [
            { "type": "button", "text": { "type": "plain_text", "text": "Approve ✅" }, "style": "primary", "action_id": "approve_remediation", "value": "approve:${META}" },
            { "type": "button", "text": { "type": "plain_text", "text": "Reject ❌"  }, "style": "danger",  "action_id": "reject_remediation",  "value": "reject:${META}"  }
          ]
        }
EOB
)
          fi

          # Short error snippet (only on plan failure)
          EXTRA_BLOCK=""
          if [ "${PLAN_EXIT}" = "1" ]; then
            SNIPPET=$(head -n 60 /tmp/plan.log | sed 's/"/\\"/g')
            EXTRA_BLOCK=", { \"type\":\"section\", \"text\": { \"type\":\"mrkdwn\", \"text\": \"\`\`\`${SNIPPET}\`\`\`\" } }"
          fi

          cat > payload.json <<JSON
          {
            "channel": "${SLACK_CHANNEL_ID}",
            "text": "${STATUS}",
            "blocks": [
              { "type": "header", "text": { "type": "plain_text", "text": "${HEADER}", "emoji": true } },
              {
                "type": "section",
                "text": { "type": "mrkdwn", "text": "${PROMPT}" }
              },
              {
                "type": "section",
                "fields": [
                  { "type": "mrkdwn", "text": "*Repo:*\\n${REPO}" },
                  { "type": "mrkdwn", "text": "*Branch:*\\n${BRANCH}" },
                  { "type": "mrkdwn", "text": "*Commit:*\\n\`${SHA}\`" },
                  { "type": "mrkdwn", "text": "*Run:*\\n<${RUN_URL}|Open>" },
                  { "type": "mrkdwn", "text": "*Plan:*\\n${PLAN_SUMMARY:-n/a}" }
                ]
              }${ACTIONS_BLOCK}${EXTRA_BLOCK}
            ]
          }
          JSON

          RESP=$(curl -sS -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
            -H "Content-type: application/json; charset=utf-8" \
            --data @payload.json)

          echo "$RESP" | jq . || true
          echo "$RESP" | jq -e '.ok == true' >/dev/null

      - name: Upload plan artifact
        if: env.PLAN_EXIT == '1' || env.PLAN_EXIT == '2'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-and-log
          path: |
            terraform/tfplan.out
            /tmp/plan.log
